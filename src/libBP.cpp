#include "bp_interface.h"
#include "stdio.h"
#include "BPinterface.h"


/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class bp_interface */

#ifndef _Included_bp_interface
#define _Included_bp_interface
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     bp_interface
 * Method:    initBpInterface
 * Signature: ()J
 */
  JNIEXPORT jlong JNICALL Java_bp_1interface_initBpInterface (JNIEnv *, jobject){

    lgbp::BpInterface* alg = new lgbp::BpInterface();
    
    return alg;
  }

/*
 * Class:     bp_interface
 * Method:    destroyBpInterface
 * Signature: ()V
 */
  JNIEXPORT void JNICALL Java_bp_1interface_destroyBpInterface (JNIEnv *, jobject){
    delete alg;
  }

/*
 * Class:     bp_interface
 * Method:    doBP
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_bp_1interface_doBP (JNIEnv * env, jobject job, jstring fileName){

  // Get the bpObject
  jclass cls = env->GetObjectClass(obj);
  jfieldID fid = env->GetFieldID(cls, "interfacePtr", "L");
  jlong alg = env->GetIntField(obj,fid);
  alg = (BpInterface*)alg;


printf("\n\ndoBP\n");
const char *str= env->GetStringUTFChars(fileName, NULL);
int len = env->GetStringLength(fileName);

char file[len];
 printf("\n\n");
for(int i=0; i < len; i++){
file[i] = str[i];
 printf("%c  ", (char)str[i]);
}
//printf("\n\n");

  printf("The string is %s\n\n", file);

 
 char task[] = "PR";
 printf("Initializing\n");
  alg->initialize(60, task, file, NULL, NULL, true);
  alg->runInference();
 

  //need to release this string when done with it in
  //order to avoid memory leak
  env->ReleaseStringUTFChars(fileName, str);
 
  return true;
}



/*
 * Class:     bp_interface
 * Method:    getSolution
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_bp_1interface_getSolution (JNIEnv * env, jobject jobj){
  printf("getSolution\n");
  double res;
  //   alg->getSolution(res);
// FILE* output = fopen("bp_results.txt", "w");
// fprintf(output, "%g\n", res);
// fclose(output);
  return env->NewStringUTF(":O");
  
}

#ifdef __cplusplus
}
#endif
#endif
